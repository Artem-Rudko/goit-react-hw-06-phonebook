{"version":3,"sources":["components/Filter/Filter.module.css","components/ContactList/ContactList.module.css","redux/actions.js","redux/reducer.js","redux/store.js","components/ContactForm/ContactForm.js","components/ContactList/ContactItem.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","index.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","saveContact","createAction","delContact","filterContact","items","createReducer","state","action","payload","filter","contact","id","_","combineReducers","persistConfig","key","storage","rootReducer","contacts","contactsReducer","persistedReducer","persistReducer","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","persistor","persistStore","ContactForm","props","useState","name","setName","number","setNumber","setId","handleInputChange","e","currentTarget","value","reset","className","styles","inputForm","onSubmit","preventDefault","label","input","type","placeholder","pattern","title","required","onChange","submitBtn","defaultProps","ContactItem","onDeleteContact","onClick","ContactList","contactList","map","Filter","App","setContacts","dispatch","useDispatch","normalizedFilter","toLowerCase","filteredContacts","includes","data","normalizedData","dublicate","find","newContact","uuidv4","alert","contactId","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.b5422a1d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__thd0q\",\"input\":\"Filter_input__3wnTx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList\":\"ContactList_contactList__34Siq\"};","import { createAction } from '@reduxjs/toolkit';\n// import { SAVE_CONTACT, DELETE_CONTACT, FILTER_CONTACT } from './action-types';\n\nexport const saveContact = createAction('contacts/save');\n\n// export function saveContact({ id, name, number }) {\n//     return {\n//         type: SAVE_CONTACT,\n//         payload: { id, name, number },\n//     };\n// }\n\nexport const delContact = createAction('contacts/delete');\n\n// export function delContact(id) {\n//     return {\n//         type: DELETE_CONTACT,\n//         payload: id,\n//     };\n// }\n\nexport const filterContact = createAction('contacts/filter');\n\n// export function filterContact(text) {\n//     return {\n//         type: FILTER_CONTACT,\n//         payload: text,\n//     };\n// }\n\n// export default { saveContact, delContact, filterContact };\n","import { createReducer } from '@reduxjs/toolkit';\nimport { combineReducers } from 'redux';\nimport { saveContact, delContact, filterContact } from './actions';\n\n// import actions from './actions';\n\n// import { SAVE_CONTACT, DELETE_CONTACT, FILTER_CONTACT } from './action-types';\n\n// const INITIAL_STATE = {\n//     contacts: {\n//         items: [],\n//         filter: '',\n//     },\n// };\n\nconst items = createReducer([], {\n    [saveContact]: (state, action) => [...state, action.payload],\n    [delContact]: (state, action) =>\n        state.filter(contact => contact.id !== action.payload),\n});\n\nconst filter = createReducer('', {\n    [filterContact]: (_, action) => action.payload,\n});\n\n// export const reducer = (state = INITIAL_STATE, action) => {\n//     const contactsStore = [...state.contacts.items];\n\n//     switch (action.type) {\n//         case SAVE_CONTACT:\n//             return {\n//                 ...state,\n//                 contacts: {\n//                     ...state.contacts,\n//                     items: [...state.contacts.items, action.payload],\n//                 },\n//             };\n//         case DELETE_CONTACT:\n//             return {\n//                 ...state,\n//                 contacts: {\n//                     ...state.contacts,\n//                     items: [\n//                         ...contactsStore.filter(\n//                             contact => contact.id !== action.payload,\n//                         ),\n//                     ],\n//                 },\n//             };\n//         case FILTER_CONTACT:\n//             return {\n//                 ...state,\n//                 contacts: {\n//                     ...state.contacts,\n//                     filter: action.payload,\n//                 },\n//             };\n//         default:\n//             return state;\n//     }\n// };\n\nexport default combineReducers({\n    items,\n    filter,\n});\n","import { configureStore, combineReducers } from '@reduxjs/toolkit';\nimport {\n    persistStore,\n    persistReducer,\n    FLUSH,\n    REHYDRATE,\n    PAUSE,\n    PERSIST,\n    PURGE,\n    REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n\nimport contactsReducer from './reducer';\n\nconst persistConfig = {\n    key: 'phonebook',\n    storage,\n};\n\nconst rootReducer = combineReducers({\n    contacts: contactsReducer,\n});\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nconst store = configureStore({\n    reducer: persistedReducer,\n    middleware: getDefaultMiddleware =>\n        getDefaultMiddleware({\n            serializableCheck: {\n                ignoredActions: [\n                    FLUSH,\n                    REHYDRATE,\n                    PAUSE,\n                    PERSIST,\n                    PURGE,\n                    REGISTER,\n                ],\n            },\n        }),\n    // devTools: process.env.NODE_ENV === 'development',\n});\n\nconst persistor = persistStore(store);\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default { store, persistor };\n","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './ContactForm.module.css';\n\nexport default function ContactForm(props) {\n    const [name, setName] = useState('');\n    const [number, setNumber] = useState('');\n    const [id, setId] = useState('');\n\n    const handleInputChange = e => {\n        const { name, value } = e.currentTarget;\n\n        switch (name) {\n            case 'name':\n                setName(value);\n                break;\n            case 'number':\n                setNumber(value);\n                break;\n            default:\n                return;\n        }\n    };\n\n    const handleSubmit = e => {\n        e.preventDefault();\n        props.onSubmit({ name, number, id });\n        reset();\n    };\n\n    const reset = () => {\n        setName('');\n        setNumber('');\n        setId('');\n    };\n\n    return (\n        <form className={styles.inputForm} onSubmit={handleSubmit}>\n            <label className={styles.label}>\n                <span>Name</span>\n                <input\n                    className={styles.input}\n                    type=\"text\"\n                    name=\"name\"\n                    value={name}\n                    placeholder=\"i.e. James Bond\"\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                    title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n                    required\n                    onChange={handleInputChange}\n                />\n            </label>\n            <label className={styles.label}>\n                Number\n                <input\n                    className={styles.input}\n                    type=\"tel\"\n                    name=\"number\"\n                    value={number}\n                    placeholder=\"i.e. 007-00-00\"\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                    title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n                    required\n                    onChange={handleInputChange}\n                />\n            </label>\n            <button className={styles.submitBtn} type=\"submit\">\n                Add contact\n            </button>\n        </form>\n    );\n}\n\nContactForm.defaultProps = {\n    value: '',\n};\n\nContactForm.propTypes = {\n    value: PropTypes.string,\n};\n","import PropTypes from 'prop-types';\n\nconst ContactItem = ({ id, name, number, onDeleteContact }) => {\n    return (\n        <li key={id}>\n            <span>{name}:</span>\n            <span>{number}</span>\n            <button type=\"button\" onClick={() => onDeleteContact(id)}>\n                Delete\n            </button>\n        </li>\n    );\n};\n\nContactItem.propTypes = {\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n    onDeleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactItem;\n","import ContactItem from './ContactItem';\nimport PropTypes from 'prop-types';\nimport styles from './ContactList.module.css';\n\nconst ContactList = ({ contacts, onDeleteContact }) => {\n    return (\n        <ul className={styles.contactList}>\n            {contacts.map(({ id, name, number }) => (\n                <ContactItem\n                    key={id}\n                    name={name}\n                    number={number}\n                    onDeleteContact={onDeleteContact}\n                    id={id}\n                />\n            ))}\n        </ul>\n    );\n};\n\nContactList.propTypes = {\n    contacts: PropTypes.arrayOf(PropTypes.object),\n    onDeleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactList;\n","import PropTypes from 'prop-types';\nimport styles from './Filter.module.css';\n\nconst Filter = ({ value, onChange }) => {\n    return (\n        <label className={styles.label}>\n            {' '}\n            Find contacts by name\n            <input\n                className={styles.input}\n                type=\"text\"\n                value={value}\n                placeholder=\"enter name\"\n                onChange={onChange}\n            ></input>\n        </label>\n    );\n};\n\nFilter.defaultProps = {\n    value: '',\n};\n\nFilter.propTypes = {\n    value: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { v4 as uuidv4 } from 'uuid';\nimport { useDispatch } from 'react-redux';\n\nimport ContactForm from './components/ContactForm';\nimport ContactList from './components/ContactList/ContactList';\nimport Filter from './components/Filter/Filter';\n// import actions from './redux/actions';\nimport { saveContact, delContact, filterContact } from './redux/actions';\n\nimport './styles.css';\n\nexport default function App() {\n    const [contacts, setContacts] = useState([]);\n\n    const [filter, setFilter] = useState('');\n\n    const dispatch = useDispatch();\n\n    const addNewContact = data => {\n        const normalizedData = data.name.toLowerCase();\n        const dublicate = contacts.find(\n            contact => contact.name.toLowerCase() === normalizedData,\n        );\n\n        const newContact = {\n            ...data,\n            id: uuidv4(),\n        };\n\n        dublicate\n            ? alert(`${dublicate.name} is already in contacts`)\n            : dispatch(saveContact(newContact));\n        setContacts(contacts => [newContact, ...contacts]);\n    };\n\n    const changeFilter = e => {\n        // setFilter(e.currentTarget.value); // hooks is used\n        dispatch(filterContact(e.currentTarget.value)); //redux is used\n    };\n\n    const deleteContact = contactId => {\n        setContacts(contacts =>\n            contacts.filter(contact => contact.id !== contactId),\n        );\n        dispatch(delContact(contactId));\n    };\n\n    const normalizedFilter = filter.toLowerCase();\n    const filteredContacts = contacts.filter(contact =>\n        contact.name.toLowerCase().includes(normalizedFilter),\n    );\n\n    return (\n        <div className=\"App\">\n            <h1 className=\"title\">Phonebook</h1>\n            <ContactForm onSubmit={addNewContact} />\n            <h2>Contacts</h2>\n            <Filter value={filter} onChange={changeFilter} />\n            <ContactList\n                contacts={filteredContacts}\n                onDeleteContact={deleteContact}\n            />\n        </div>\n    );\n}\n\nApp.defaultProps = {\n    contacts: [],\n};\n\nApp.propTypes = {\n    contacts: PropTypes.array,\n    data: PropTypes.shape({ name: PropTypes.string, number: PropTypes.number }),\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nimport store from './redux/store';\nimport App from './App';\nimport 'modern-normalize/modern-normalize.css';\nimport './styles.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store.store}>\n            <PersistGate loading=\"null\" persistor={store.persistor}>\n                <App />\n            </PersistGate>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputForm\":\"ContactForm_inputForm__3BOT-\",\"label\":\"ContactForm_label__NThxc\",\"submitBtn\":\"ContactForm_submitBtn__28f31\"};"],"sourceRoot":""}